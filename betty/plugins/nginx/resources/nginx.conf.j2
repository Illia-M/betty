{%- set server_name = urlparse(site.configuration.base_url)['netloc'] -%}
{%- if site.configuration.base_url.startswith('https') %}
    server {
        listen 80;
        server_name {{ server_name }};
        return 301 https://$host$request_uri;
    }
{%- endif -%}
server {
	listen {% if site.configuration.base_url.startswith('https') %}443 ssl http2{% else %}80{% endif %};
	server_name {{ server_name }};
	root {{ site.configuration.www_directory_path }};
    {%- if site.configuration.base_url.startswith('https') %}
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    {%- endif %}
	add_header Cache-Control "max-age=86400";
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_types text/html text/css application/javascript application/json application/xml;

    {%- if site.configuration.content_negotiation %}
        set_by_lua_block $content_type_extension {
            local available_content_types = {'text/html', 'application/json'}
            local content_type_extensions = {}
            content_type_extensions['text/html'] = 'html'
            content_type_extensions['application/json'] = 'json'
            local content_type = require('cone').negotiate(ngx.req.get_headers()['Accept'], available_content_types)
            return content_type_extensions[content_type]
        }
    {%- else %}
        set $content_type_extension html;
    {%- endif %}
    index index.$content_type_extension;

    {%- if site.configuration.multilingual %}
        location ~ ^/({{ site.configuration.locales.values() | map(attribute='alias') | join('|') }})(/|$) {
            set $locale $1;

            add_header Content-Language "$locale" always;

            # Handle HTTP error responses.
            error_page 401 /$locale/.error/401.$content_type_extension;
            error_page 403 /$locale/.error/403.$content_type_extension;
            error_page 404 /$locale/.error/404.$content_type_extension;
            location ~ ^/$locale/\.error {
                internal;
            }

            try_files $uri $uri/ =404;
        }
        location @localized_redirect {
            {%- if site.configuration.content_negotiation %}
                set_by_lua_block $locale_alias {
                    local available_locales = {'{{ site.configuration.locales | join("', '") }}'}
                    local locale_aliases = {}
                    {%- for locale in site.configuration.locales %}
                        locale_aliases['{{ locale }}'] = '{{ site.configuration.locales[locale].alias }}'
                    {%- endfor %}
                    local locale = require('cone').negotiate(ngx.req.get_headers()['Accept-Language'], available_locales)
                    return locale_aliases[locale]
                }
            {%- else %}
                set $locale_alias {{ site.configuration.locales[site.configuration.default_locale].alias }};
            {%- endif %}
            return 301 /$locale_alias$uri;
        }
        location / {
            try_files $uri @localized_redirect;
        }
    {%- else %}
        location / {
            # Handle HTTP error responses.
            error_page 401 /.error/401.$content_type_extension;
            error_page 403 /.error/403.$content_type_extension;
            error_page 404 /.error/404.$content_type_extension;
            location /.error {
                internal;
            }

            try_files $uri $uri/ =404;
        }
    {%- endif %}
}
